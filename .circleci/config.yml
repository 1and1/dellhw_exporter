# This configuration was automatically generated from a CircleCI 1.0 config.
# It should include any build commands you had along with commands that CircleCI
# inferred from your project structure. We strongly recommend you read all the
# comments in this file to understand the structure of CircleCI 2.0, as the idiom
# for configuration has changed substantially in 2.0 to allow arbitrary jobs rather
# than the prescribed lifecycle of 1.0. In general, we recommend using this generated
# configuration as a reference rather than using it in production, though in most
# cases it should duplicate the execution of your original 1.0 config.
version: 2
jobs:
  build:
    working_directory: /go/src/github.com/galexrt/dellhw_exporter
    parallelism: 1
    shell: /bin/bash --login
    environment:
      CIRCLE_ARTIFACTS: /tmp/circleci-artifacts
      CIRCLE_TEST_REPORTS: /tmp/circleci-test-results
      DOCKER_IMAGE_NAME: galexrt/dellhw_exporter
      QUAY_IMAGE_NAME: quay.io/galexrt/dellhw_exporter
      DOCKER_TEST_IMAGE_NAME: quay.io/prometheus/golang-builder:1.10-base
      REPO_PATH: github.com/galexrt/dellhw_exporter
    docker:
    - image: circleci/golang:1.10
    steps:
    - restore_cache:
        keys:
        - v1-dep-{{ .Branch }}-
        - v1-dep-master-
        - v1-dep-
    - checkout
    - run: mkdir -p $CIRCLE_ARTIFACTS $CIRCLE_TEST_REPORTS
    - run: sudo curl -L -o /usr/bin/docker 'https://s3-external-1.amazonaws.com/circle-downloads/docker-1.9.1-circleci'
    - run: sudo chmod 0755 /usr/bin/docker
    - run: sudo curl -L 'https://github.com/aktau/github-release/releases/download/v0.7.2/linux-amd64-github-release.tar.bz2' | sudo tar xvjf - --strip-components 3 -C /usr/local/bin
    - run: echo -e "export DOCKER_IMAGE_NAME=galexrt/dellhw_exporter\nexport QUAY_IMAGE_NAME=quay.io/galexrt/dellhw_exporter\nexport DOCKER_TEST_IMAGE_NAME=quay.io/prometheus/golang-builder:1.8-base\nexport REPO_PATH=github.com/galexrt/dellhw_exporter\nexport PATH=$PATH:/usr/local/go/bin:/go/bin" >> $BASH_ENV
    - run: make promu
    - setup_remote_docker:
        docker_layer_caching: true
    - run: docker info
    - run: promu crossbuild
    - run: ln -s .build/linux-amd64/dellhw_exporter dellhw_exporter
    - run: |
        if [ -n "$CIRCLE_TAG" ]; then
          make docker DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME DOCKER_IMAGE_TAG=$CIRCLE_TAG
          make docker DOCKER_IMAGE_NAME=$QUAY_IMAGE_NAME DOCKER_IMAGE_TAG=$CIRCLE_TAG
        else
          make docker DOCKER_IMAGE_NAME=$DOCKER_IMAGE_NAME
          make docker DOCKER_IMAGE_NAME=$QUAY_IMAGE_NAME
        fi
    - run: mkdir $CIRCLE_ARTIFACTS/binaries/ && cp -a .build/* $CIRCLE_ARTIFACTS/binaries/
    - run: docker images
    - save_cache:
        key: v1-dep-{{ .Branch }}-{{ epoch }}
        paths:
        - /go
    - run: promu crossbuild tarballs
    - run: promu checksum .tarballs
    - run: promu release .tarballs
    - run: mkdir $CIRCLE_ARTIFACTS/releases/ && cp -a .tarballs/* $CIRCLE_ARTIFACTS/releases/
    - run: docker login -e $DOCKER_EMAIL -u $DOCKER_LOGIN -p $DOCKER_PASSWORD
    - run: docker login -e $QUAY_EMAIL -u $QUAY_LOGIN -p $QUAY_PASSWORD quay.io
    - run: |
        if [[ "$CIRCLE_TAG" =~ ^v[0-9]+(\.[0-9]+){2}$ ]]; then
          docker tag "$DOCKER_IMAGE_NAME:$CIRCLE_TAG" "$DOCKER_IMAGE_NAME:latest"
          docker tag "$QUAY_IMAGE_NAME:$CIRCLE_TAG" "$QUAY_IMAGE_NAME:latest"
        fi
    - run: docker push $DOCKER_IMAGE_NAME
    - run: docker push $QUAY_IMAGE_NAME
    # Deployment
    - store_test_results:
        path: /tmp/circleci-test-results
    - store_artifacts:
        path: /tmp/circleci-artifacts
    - store_artifacts:
        path: /tmp/circleci-test-results
